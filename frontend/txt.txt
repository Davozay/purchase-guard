Hereâ€™s a **structured 4-week plan** to build your **"Did I Already Buy This?"** MVP using **React, Firebase, and Node.js** (no Python). Includes weekly milestones, code snippets, and deployment steps.

---

## **ðŸš€ MVP Development Plan (4 Weeks)**  
**Goal:** Build a browser extension + web app that warns users if theyâ€™re rebuying items.  

### **ðŸ“Œ Tech Stack**  
- **Frontend:** React (Vite) + Tailwind CSS  
- **Backend:** Firebase (Auth, Firestore, Cloud Functions)  
- **Gmail API:** Node.js (`googleapis` library)  
- **Browser Extension:** Chrome Manifest V3  

---

## **ðŸ“… Week 1: Setup & Gmail Integration**
### **Step 1: Project Setup**
1. **Initialize Firebase Project**  
   - Create a project at [Firebase Console](https://console.firebase.google.com/).  
   - Enable **Google Auth** and **Firestore Database**.  

2. **Set Up React App**  
   ```bash
   npm create vite@latest shopping-assistant --template react
   cd shopping-assistant
   npm install firebase @fortawesome/react-fontawesome tailwindcss
   npx tailwindcss init
   ```

3. **Initialize Firebase in React**  
   ```javascript
   // src/firebase.js
   import { initializeApp } from "firebase/app";
   import { getAuth, GoogleAuthProvider } from "firebase/auth";
   import { getFirestore } from "firebase/firestore";

   const firebaseConfig = { /* Your config */ };
   const app = initializeApp(firebaseConfig);
   export const auth = getAuth(app);
   export const db = getFirestore(app);
   export const provider = new GoogleAuthProvider();
   provider.addScope('https://www.googleapis.com/auth/gmail.readonly');
   ```

---

### **Step 2: Gmail API Integration (Node.js)**
1. **Set Up Firebase Cloud Functions**  
   ```bash
   firebase init functions
   cd functions
   npm install googleapis @google-cloud/local-auth
   ```

2. **Backend Function to Fetch Receipts**  
   ```javascript
   // functions/index.js
   const functions = require("firebase-functions");
   const { google } = require("googleapis");

   exports.scanGmail = functions.https.onCall(async (data, context) => {
     const auth = new google.auth.OAuth2();
     auth.setCredentials({ access_token: data.authToken });
     
     const gmail = google.gmail({ version: 'v1', auth });
     const res = await gmail.users.messages.list({ 
       userId: 'me', 
       q: 'from:amazon.com OR from:walmart.com' 
     });
     
     // Parse emails (simplified example)
     return res.data.messages.map(msg => ({ id: msg.id, snippet: msg.snippet }));
   });
   ```

3. **Deploy Cloud Function**  
   ```bash
   firebase deploy --only functions
   ```

---

## **ðŸ“… Week 2: Frontend Dashboard**
### **Step 3: Build React UI**
1. **Google Login Button**  
   ```javascript
   // src/Login.js
   import { signInWithPopup } from "firebase/auth";
   import { auth, provider } from "./firebase";

   const Login = () => {
     const handleLogin = async () => {
       const result = await signInWithPopup(auth, provider);
       const token = result.user.accessToken; // Pass to Cloud Function
     };
     return <button onClick={handleLogin}>Sign in with Google</button>;
   };
   ```

2. **Purchase History Dashboard**  
   ```javascript
   // src/Dashboard.js
   import { db } from "./firebase";
   import { collection, query, where, onSnapshot } from "firebase/firestore";

   const Dashboard = () => {
     const [items, setItems] = useState([]);
     
     useEffect(() => {
       const q = query(collection(db, "purchases"), where("userId", "==", auth.currentUser.uid));
       onSnapshot(q, (snapshot) => {
         setItems(snapshot.docs.map(doc => doc.data()));
       });
     }, []);

     return (
       <div>
         {items.map(item => <div key={item.id}>{item.name}</div>)}
       </div>
     );
   };
   ```

3. **Manual Entry Form**  
   ```javascript
   // src/AddItem.js
   import { addDoc, collection } from "firebase/firestore";

   const AddItem = () => {
     const [name, setName] = useState("");
     
     const handleSubmit = async () => {
       await addDoc(collection(db, "purchases"), {
         name,
         userId: auth.currentUser.uid,
         date: new Date()
       });
     };
     
     return (
       <input type="text" onChange={(e) => setName(e.target.value)} />
       <button onClick={handleSubmit}>Add</button>
     );
   };
   ```

---

## **ðŸ“… Week 3: Browser Extension**
### **Step 4: Chrome Extension Setup**
1. **Create `manifest.json`**  
   ```json
   {
     "manifest_version": 3,
     "name": "Purchase Guard",
     "version": "1.0",
     "action": { "default_popup": "index.html" },
     "permissions": ["activeTab", "identity", "https://*.firebaseio.com/*"],
     "background": { "service_worker": "background.js" }
   }
   ```

2. **Detect Shopping Sites**  
   ```javascript
   // background.js
   chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
     if (tab.url.includes("amazon.com") || tab.url.includes("walmart.com")) {
       chrome.action.setPopup({ tabId, popup: "popup.html" });
     }
   });
   ```

3. **Check Firestore for Duplicates**  
   ```javascript
   // popup.js
   import { getFirestore, query, collection, where } from "firebase/firestore";

   const db = getFirestore();
   const productName = "Coffee Beans"; // Extract from page (e.g., via DOM scraping)
   
   const q = query(collection(db, "purchases"), 
     where("userId", "==", auth.currentUser.uid),
     where("name", "==", productName)
   );
   // Show warning if query returns results.
   ```

---

## **ðŸ“… Week 4: Polish & Deploy**
### **Step 5: Styling & Final Touches**
1. **Add Tailwind CSS**  
   ```javascript
   // src/main.jsx
   import "./index.css";
   ```

2. **Deploy Frontend**  
   ```bash
   npm run build
   firebase deploy --only hosting
   ```

3. **Submit Chrome Extension**  
   - Zip your extension folder.  
   - Upload to [Chrome Web Store Developer Dashboard](https://chrome.google.com/webstore/devconsole/).  

---

## **ðŸŽ¯ Stretch Goals (If Time Permits)**
- **Price tracking** ("You bought this for $X last time").  
- **Expiry alerts** for groceries.  
- **Mobile app** (React Native).  

---

## **ðŸ“Œ Key Tips**
1. **Test Early**  
   - Mock Gmail data during development to avoid API quotas.  
2. **Prioritize Core Features**  
   - Focus on **Gmail scanning** + **extension warning** first.  
3. **Use Firebase Emulators**  
   ```bash
   firebase emulators:start
   ```

---

## **Next Steps**
1. **Start with Firebase Setup** (Day 1).  
2. **Build the Gmail parser** (Week 1).  
3. **Implement the Chrome extension** (Week 3).  

Need help with any specific part? Ask for code snippets or debugging! ðŸš€